{
  "schema_version": "1.6.3",
  "id": "CVE-2022-36085",
  "modified": "2024-05-20T16:03:47Z",
  "published": "2022-09-13T17:40:16Z",
  "aliases": [
    "GHSA-f524-rf33-2jjr",
    "GO-2022-0978"
  ],
  "related": [],
  "summary": "Protection bypass in github.com/open-policy-agent/opa. Open Policy Agent (OPA) is an open source, general-purpose policy engine. The Rego compiler provides a (deprecated) `WithUnsafeBuiltins` function, which allows users to provide a set of built-in functions that should be deemed unsafe — and as such rejected — by the compiler if encountered in the policy compilation stage. A bypass of this protection has been found, where the use of the `with` keyword to mock such a built-in function (a feature introduced in OPA v0.40.0), isn’t taken into account by `WithUnsafeBuiltins`. Multiple conditions need to be met in order to create an adverse effect. Version 0.43.1 contains a patch for this issue. As a workaround, avoid using the `WithUnsafeBuiltins` function and use the `capabilities` feature instead. Open Policy Agent (OPA) es un motor de políticas de propósito general de código abierto.&#xa0;El compilador de Rego proporciona una función \"WithUnsafeBuiltins\" (en desuso), que permite a usuarios proporcionar un conjunto de funciones integradas que el compilador debería considerar inseguras y, como tales, rechazarlas si son encontradas en la etapa de compilación de políticas. .&#xa0;Se ha encontrado una omisión de esta protección, en la que \"WithUnsafeBuiltins\" no es tenido en cuenta el uso de la palabra clave \"with\" para simular una función integrada de este tipo (una característica introducida en OPA v0.40.0).&#xa0;Deben cumplirse múltiples condiciones para crear un efecto adverso.&#xa0;La versión 0.43.1 contiene un parche para este problema.&#xa0;Como mitigación, evite usar la función \"WithUnsafeBuiltins\" y use la funcionalidad \"capabilities\" en su lugar",
  "details": "Open Policy Agent (OPA) is an open source, general-purpose policy engine. The Rego compiler provides a (deprecated) WithUnsafeBuiltins function, which allows users to provide a set of built-in functions that should be deemed unsafe and rejected by the compiler if encountered in the policy compilation stage.\n\nA bypass of this protection is possible when using the \"with\" keyword to mock a built-in function that isn't taken into account by WithUnsafeBuiltins",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "9.8"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/open-policy-agent/opa"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.40.0"
            },
            {
              "fixed": "0.44.0"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "imports": [
          {
            "path": "github.com/open-policy-agent/opa/ast",
            "symbols": [
              "Args.Copy",
              "Args.Vars",
              "Array.Copy",
              "Array.Foreach",
              "Array.Iter",
              "Array.Until",
              "ArrayComprehension.Copy",
              "BeforeAfterVisitor.Walk",
              "Body.Copy",
              "Body.Vars",
              "Call.Copy",
              "CompileModules",
              "CompileModulesWithOpt",
              "Compiler.Compile",
              "Compiler.GetRulesDynamic",
              "Compiler.GetRulesDynamicWithOpts",
              "Compiler.PassesTypeCheck",
              "Compiler.rewriteWithModifiers",
              "ContainsClosures",
              "ContainsComprehensions",
              "ContainsRefs",
              "Copy",
              "Every.Copy",
              "Every.KeyValueVars",
              "Expr.Copy",
              "Expr.CopyWithoutTerms",
              "Expr.Vars",
              "GenericTransformer.Transform",
              "GenericVisitor.Walk",
              "Head.Copy",
              "Head.Vars",
              "Import.Copy",
              "IsConstant",
              "JSON",
              "JSONWithOpt",
              "Module.Copy",
              "Module.UnmarshalJSON",
              "MustCompileModules",
              "MustCompileModulesWithOpts",
              "MustJSON",
              "MustParseBody",
              "MustParseBodyWithOpts",
              "MustParseExpr",
              "MustParseImports",
              "MustParseModule",
              "MustParseModuleWithOpts",
              "MustParsePackage",
              "MustParseRef",
              "MustParseRule",
              "MustParseStatement",
              "MustParseStatements",
              "MustParseTerm",
              "NewGraph",
              "ObjectComprehension.Copy",
              "OutputVarsFromBody",
              "OutputVarsFromExpr",
              "Package.Copy",
              "ParseBody",
              "ParseBodyWithOpts",
              "ParseExpr",
              "ParseImports",
              "ParseModule",
              "ParseModuleWithOpts",
              "ParsePackage",
              "ParseRef",
              "ParseRule",
              "ParseStatement",
              "ParseStatements",
              "ParseStatementsWithOpts",
              "ParseTerm",
              "Parser.Parse",
              "Pretty",
              "QueryContext.Copy",
              "Ref.ConstantPrefix",
              "Ref.Copy",
              "Ref.Dynamic",
              "Ref.Extend",
              "Ref.OutputVars",
              "Rule.Copy",
              "SetComprehension.Copy",
              "SomeDecl.Copy",
              "Term.Copy",
              "Term.Vars",
              "Transform",
              "TransformComprehensions",
              "TransformRefs",
              "TransformVars",
              "TreeNode.DepthFirst",
              "TypeEnv.Get",
              "Unify",
              "ValueMap.Copy",
              "ValueMap.Equal",
              "ValueMap.Hash",
              "ValueMap.Iter",
              "ValueMap.MarshalJSON",
              "ValueMap.String",
              "ValueToInterface",
              "VarVisitor.Walk",
              "Walk",
              "WalkBeforeAndAfter",
              "WalkBodies",
              "WalkClosures",
              "WalkExprs",
              "WalkNodes",
              "WalkRefs",
              "WalkRules",
              "WalkTerms",
              "WalkVars",
              "WalkWiths",
              "With.Copy",
              "baseDocEqIndex.AllRules",
              "baseDocEqIndex.Build",
              "baseDocEqIndex.Lookup",
              "bodySafetyTransformer.Visit",
              "comprehensionIndexNestedCandidateVisitor.Walk",
              "comprehensionIndexRegressionCheckVisitor.Walk",
              "isBuiltinRefOrVar",
              "metadataParser.Parse",
              "object.Copy",
              "object.Diff",
              "object.Filter",
              "object.Foreach",
              "object.Intersect",
              "object.Iter",
              "object.Map",
              "object.Merge",
              "object.MergeWith",
              "object.Until",
              "queryCompiler.Compile",
              "queryCompiler.checkDeprecatedBuiltins",
              "queryCompiler.checkUnsafeBuiltins",
              "refChecker.Visit",
              "refindices.Sorted",
              "refindices.Update",
              "rewriteNestedHeadVarLocalTransform.Visit",
              "rewriteWithModifier",
              "rewriteWithModifiersInBody",
              "ruleArgLocalRewriter.Visit",
              "ruleWalker.Do",
              "set.Copy",
              "set.Diff",
              "set.Foreach",
              "set.Intersect",
              "set.Iter",
              "set.Map",
              "set.Reduce",
              "set.Union",
              "set.Until",
              "trieNode.Do",
              "trieNode.Traverse",
              "trieTraversalResult.Add",
              "typeChecker.CheckBody",
              "typeChecker.CheckTypes",
              "validateWith",
              "validateWithFunctionValue"
            ]
          }
        ]
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-policy-agent/opa/pull/4540"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-policy-agent/opa/pull/4616"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-policy-agent/opa/releases/tag/v0.43.1"
    }
  ],
  "credits": [
    {
      "name": "anderseknert@"
    }
  ],
  "database_specific": {
    "metrics": {
      "cvssMetricV31": [
        {
          "source": "nvd@nist.gov",
          "type": "Primary",
          "cvssData": {
            "version": "3.1",
            "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "attackVector": "NETWORK",
            "attackComplexity": "LOW",
            "privilegesRequired": "NONE",
            "userInteraction": "NONE",
            "scope": "UNCHANGED",
            "confidentialityImpact": "HIGH",
            "integrityImpact": "HIGH",
            "availabilityImpact": "HIGH",
            "baseScore": 9.8,
            "baseSeverity": "CRITICAL"
          },
          "exploitabilityScore": 3.9,
          "impactScore": 5.9
        },
        {
          "source": "security-advisories@github.com",
          "type": "Secondary",
          "cvssData": {
            "version": "3.1",
            "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
            "attackVector": "NETWORK",
            "attackComplexity": "HIGH",
            "privilegesRequired": "NONE",
            "userInteraction": "NONE",
            "scope": "UNCHANGED",
            "confidentialityImpact": "HIGH",
            "integrityImpact": "HIGH",
            "availabilityImpact": "NONE",
            "baseScore": 7.4,
            "baseSeverity": "HIGH"
          },
          "exploitabilityScore": 2.2,
          "impactScore": 5.2
        }
      ]
    },
    "cwe_details": [
      {
        "cwe_id": "NVD-CWE-noinfo",
        "name": "Primary",
        "description": "",
        "source": "nvd@nist.gov",
        "url": ""
      },
      {
        "cwe_id": "CWE-20 CWE-693",
        "name": "Secondary",
        "description": "",
        "source": "security-advisories@github.com",
        "url": ""
      }
    ],
    "repositories": [
      {
        "url": "https://github.com/open-policy-agent/opa",
        "name": "open-policy-agent/opa",
        "description": "Open Policy Agent (OPA) is an open source, general-purpose policy engine.",
        "date_created": "2015-12-28T22:08:25Z",
        "date_last_push": "2024-06-20T07:27:44Z",
        "owner": "open-policy-agent",
        "forks_count": "1284",
        "stars_count": "9285",
        "repo_language": "Go"
      },
      {
        "url": "https://github.com/open-policy-agent/opa",
        "name": "open-policy-agent/opa",
        "description": "Open Policy Agent (OPA) is an open source, general-purpose policy engine.",
        "date_created": "2015-12-28T22:08:25Z",
        "date_last_push": "2024-06-20T07:27:44Z",
        "owner": "open-policy-agent",
        "forks_count": "1284",
        "stars_count": "9285",
        "repo_language": "Go"
      }
    ],
    "nodes": [
      {
        "operator": "OR",
        "negate": false,
        "cpeMatch": [
          {
            "vulnerable": true,
            "criteria": "cpe:2.3:a:openpolicyagent:open_policy_agent:*:*:*:*:*:*:*:*",
            "matchCriteriaId": "24044142-C7B3-4994-9F36-5ED0299C8E5B",
            "versionStartIncluding": "0.40.0",
            "versionEndExcluding": "0.43.1"
          }
        ]
      }
    ],
    "vulndb_data": {
      "url": "https://pkg.go.dev/vuln/GO-2022-0978",
      "review_status": "REVIEWED"
    },
    "datasources": {
      "govuln": true,
      "nvd": true,
      "cvefixes": false
    }
  }
}