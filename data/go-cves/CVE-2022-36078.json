{
  "schema_version": "1.6.3",
  "id": "CVE-2022-36078",
  "modified": "2024-05-20T16:03:47Z",
  "published": "2022-09-02T18:37:03Z",
  "aliases": [
    "GHSA-4p6f-m4f9-ch88",
    "GO-2022-0963"
  ],
  "related": [],
  "summary": "Resource exhaustion in github.com/gagliardetto/binary. Binary provides encoding/decoding in Borsh and other formats. The vulnerability is a memory allocation vulnerability that can be exploited to allocate slices in memory with (arbitrary) excessive size value, which can either exhaust available memory or crash the whole program. When using `github.com/gagliardetto/binary` to parse unchecked (or wrong type of) data from untrusted sources of input (e.g. the blockchain) into slices, it's possible to allocate memory with excessive size. When `dec.Decode(&val)` method is used to parse data into a structure that is or contains slices of values, the length of the slice was previously read directly from the data itself without any checks on the size of it, and then a slice was allocated. This could lead to an overflow and an allocation of memory with excessive size value. Users should upgrade to `v0.7.1` or higher. A workaround is not to rely on the `dec.Decode(&val)` function to parse the data, but to use a custom `UnmarshalWithDecoder()` method that reads and checks the length of any slice. Binary proporciona codificación/decodificación en Borsh y otros formatos. La vulnerabilidad es un fallo de asignación de memoria que puede ser explotada para asignar fragmentos en la memoria con un valor de tamaño (arbitrario) excesivo, que puede agotar la memoria disponible o bloquear todo el programa. Cuando es usada \"github.com/gagliardetto/binary\" para analizar datos no verificados (o de tipo incorrecto) procedentes de fuentes de entrada no confiables (por ejemplo, la cadena de bloques) en trozos, es posible asignar memoria con un tamaño excesivo. Cuando es usado el método \"dec.Decode(&amp;val)\" para parsear datos en una estructura que es o contiene trozos de valores, la longitud del trozo es leído previamente directamente de los propios datos sin ninguna comprobación del tamaño de los mismos, y luego es asignado un trozo. Esto podría conllevar a un desbordamiento y una asignación de memoria con un valor de tamaño excesivo. Los usuarios deberían actualizar a versiones \"v0.7.1\" o superiores. Una mitigación es no confiar en la función \"dec.Decode(&amp;val)\" para analizar los datos, sino usar un método personalizado \"UnmarshalWithDecoder()\" que lea y compruebe la longitud de cualquier slice",
  "details": "A memory allocation vulnerability can be exploited to allocate arbitrarily large slices, which can exhaust available memory or crash the program.\n\nWhen parsing data from untrusted sources of input (e.g. the blockchain), the length of the slice to allocate is read directly from the data itself without any checks, which could lead to an allocation of excessive memory",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "7.5"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/gagliardetto/binary"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.7.1"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "imports": [
          {
            "path": "github.com/gagliardetto/binary",
            "symbols": [
              "BaseVariant.UnmarshalBinaryVariant",
              "BinByteCount",
              "BorshByteCount",
              "CompactU16ByteCount",
              "Decoder.Decode",
              "Decoder.Discard",
              "Decoder.ReadInt64",
              "Decoder.ReadNBytes",
              "Decoder.ReadRustString",
              "Decoder.ReadTypeID",
              "Decoder.ReadUint64",
              "Decoder.decodeBin",
              "Decoder.decodeBorsh",
              "Decoder.decodeCompactU16",
              "Encoder.Encode",
              "Encoder.WriteFloat32",
              "Encoder.WriteFloat64",
              "Encoder.encodeBin",
              "Encoder.encodeBorsh",
              "Encoder.encodeCompactU16",
              "Int64.UnmarshalWithDecoder",
              "JSONFloat64.MarshalWithEncoder",
              "MarshalBin",
              "MarshalBorsh",
              "MarshalCompactU16",
              "MustBinByteCount",
              "MustBorshByteCount",
              "MustCompactU16ByteCount",
              "Uint64.UnmarshalWithDecoder",
              "UnmarshalBin",
              "UnmarshalBorsh",
              "UnmarshalCompactU16",
              "discardNBytes",
              "readNBytes"
            ]
          }
        ]
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/gagliardetto/binary/security/advisories/GHSA-4p6f-m4f9-ch88"
    },
    {
      "type": "WEB",
      "url": "https://github.com/gagliardetto/binary/pull/7"
    },
    {
      "type": "WEB",
      "url": "https://github.com/gagliardetto/binary/releases/tag/v0.7.1"
    }
  ],
  "credits": [],
  "database_specific": {
    "metrics": {
      "cvssMetricV31": [
        {
          "source": "nvd@nist.gov",
          "type": "Primary",
          "cvssData": {
            "version": "3.1",
            "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "attackVector": "NETWORK",
            "attackComplexity": "LOW",
            "privilegesRequired": "NONE",
            "userInteraction": "NONE",
            "scope": "UNCHANGED",
            "confidentialityImpact": "NONE",
            "integrityImpact": "NONE",
            "availabilityImpact": "HIGH",
            "baseScore": 7.5,
            "baseSeverity": "HIGH"
          },
          "exploitabilityScore": 3.9,
          "impactScore": 3.6
        },
        {
          "source": "security-advisories@github.com",
          "type": "Secondary",
          "cvssData": {
            "version": "3.1",
            "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "attackVector": "NETWORK",
            "attackComplexity": "LOW",
            "privilegesRequired": "NONE",
            "userInteraction": "REQUIRED",
            "scope": "UNCHANGED",
            "confidentialityImpact": "HIGH",
            "integrityImpact": "HIGH",
            "availabilityImpact": "HIGH",
            "baseScore": 8.8,
            "baseSeverity": "HIGH"
          },
          "exploitabilityScore": 2.8,
          "impactScore": 5.9
        }
      ]
    },
    "cwe_details": [
      {
        "cwe_id": "nvd@nist.gov",
        "name": "Primary",
        "description": "CWE-1284",
        "url": ""
      },
      {
        "cwe_id": "security-advisories@github.com",
        "name": "Secondary",
        "description": "CWE-789",
        "url": ""
      }
    ],
    "repositories": [],
    "nodes": [
      {
        "operator": "OR",
        "negate": false,
        "cpeMatch": [
          {
            "vulnerable": true,
            "criteria": "cpe:2.3:a:binary_project:binary:*:*:*:*:*:go:*:*",
            "matchCriteriaId": "A0A6D34C-F9B9-46CE-B80A-4B5C44DE6A71",
            "versionEndExcluding": "0.7.1"
          }
        ]
      }
    ],
    "vulndb_data": {
      "url": "https://pkg.go.dev/vuln/GO-2022-0963",
      "review_status": "REVIEWED"
    },
    "datasources": {
      "govuln": true,
      "nvd": true,
      "cvefixes": false
    }
  }
}